THIS IS VERY QUICK AND DIRTY I PROMISE I WILL MAKE BETTER DOCS AT SOME POINT


=============
NEW INTERFACE
=============

Commands
--------

Commands have exactly the same format, except they are always 32 bits wide.
No ifs, ands, or buts.

Logs and Command Receipts
-------------------------

Note that all logs and command receipts have a 32-bit header. Bits 13:0 of
this header match between the two types of messages (which is how you can
tell the two apart; see the meaning of the L/C bit).

Command receipts occur over a single 32-bit flit and have the following 
structure:

+------+----------+--------------------------------------------------------+
|BITS  | NAME     | MEANING                                                |
+------+----------+--------------------------------------------------------+
|31:21 | dout_not_| The number of cycles since the TREADY input to the dbg |
|      | ready_cnt| guv was last asserted                                  |
+------+----------+--------------------------------------------------------+
|20    |inj_failed| Whether the most recent injection has failed           |
+------+----------+--------------------------------------------------------+
|19    | dut_rst  | The value of the dut_rst register in the dbg_guv       |
+------+----------+--------------------------------------------------------+
|18    |inj_TVALID| The dbg_guv's inj_TVALID register value                |
+------+----------+--------------------------------------------------------+
|17    | drop_cnt | Whether the dbg_guv's drop_cnt is greater than zero    |
+------+----------+--------------------------------------------------------+
|16    | log_cnt  | Whether the dbg_guv's log_cnt is greater than zero     |
+------+----------+--------------------------------------------------------+
|15    | keep_    | The value of the keep_dropping register in the dbg_guv |
|      | dropping |                                                        |
+------+----------+--------------------------------------------------------+
|14    | keep_    | The value of the keep_logging register in the dbg_guv  |
|      | logging  |                                                        |
+------+----------+--------------------------------------------------------+
|13    | keep_    | The value of the keep_pausing register in the dbg_guv  |
|      | pausing  |                                                        |
+------+----------+--------------------------------------------------------+
|12    | L/C      | This bit (which also corresponds to bit 13 in the log  |
|      |          | header) is always a constant 1 for command receipts.   |
+------+----------+--------------------------------------------------------+
|11:0  | ADDR     | The address of the debug guv                           |
+------+----------+--------------------------------------------------------+


Logs occur over multiple flits. The header has the following format:

+------+----------+--------------------------------------------------------+
|BITS  | NAME     | MEANING                                                |
+------+----------+--------------------------------------------------------+
|31:26 | DEST_    | The number of DEST bits of this logged flit            |
|      | WIDTH    |                                                        |
+------+----------+--------------------------------------------------------+
|25:20 | ID_WIDTH | The number of ID bits of this logged flit              |
+------+----------+--------------------------------------------------------+
|19    | log_last | The value of TLAST of this logged flit                 |
+------+----------+--------------------------------------------------------+
|18:13 | log_len  | The number of TDATA bytes in this log                  |
+------+----------+--------------------------------------------------------+
|12    | L/C      | This bit (which also corresponds to bit 13 in the      |
|      |          | command receipt) is always a constant 0 for logs.      |
+------+----------+--------------------------------------------------------+
|11:0  | ADDR     | The address of the debug guv                           |
+------+----------+--------------------------------------------------------+

Here's where things get a little messy. The values of DEST_WIDTH, ID_WIDTH,
and log_len determine how many 32-bit payload words will follow the header.
Use the following procedure to read the logged flit information

 1. Look at DEST_WIDTH and ID_WIDTH. If they are both zero, then this logged
    flit does not include those sidechannels. Move on to reading the TDATA 
    bytes (step four). 
    
 2. If (DEST_WIDTH + ID_WIDTH) <= 32, then one payload word follows with 
    the format {zero padding, log_TID, log_DEST}. Read it, and move on to
    step four.

 3. Otherwise, if (DEST_WIDTH + ID_WIDTH) > 32, then two paylaod words 
    follow. The first has the format {zero padding, log_TID}, and the second
    has the format {zero padding, log_TDEST}. Read these two words and move
    on to step four.

 4. Calculate the number of TDATA words as ceil(log_len/4). The log's TDATA
    information is padded _at the end_ (contrary to the left-padding used 
    for TID and TDEST). For example, if we had 9 bytes of TDATA, then you
    would read 3 payload words which would have the following format:
    
        TDATA payload flit 1 = TDATA[71:40]                (first 4 bytes)
        TDATA payload flit 2 = TDATA[39:8]                 (second 4 bytes)
        TDATA payload flit 3 = {TDATA[7:0], zero padding}  (last byte)
        


=============
OLD INTERFACE
=============

All values are big-endian and right-aligned

Commands
--------

A normal command is made up of two flits:

    Flit 0: {zero-padding, dbg_guv address, register address}
    Flit 1: data to put in that register of that dbg_guv, left-padded with zeroes

This choices of registers are:

    Reg addr = 0:  drop_cnt      
    Reg addr = 1:  log_cnt       
    Reg addr = 2:  inj_TDATA     
    Reg addr = 3:  inj_TVALID    
    Reg addr = 4:  inj_TLAST     
    Reg addr = 5:  inj_TKEEP     
    Reg addr = 6:  inj_TDEST     
    Reg addr = 7:  inj_TID       
    Reg addr = 8:  keep_pausing  
    Reg addr = 9:  keep_logging  
    Reg addr = 10: keep_dropping 
    Reg addr = 11: dut_reset     
    

A latch command only has one flit:

    Flit 0: {zero-padding, dbg_guv address, 4'hF}

Please note that once you have entered an address flit for a normal command, 
the next flit is always interpreted as data. In other words, to send a latch 
command, you must complete any partial normal commands.



Logs and Command Receipts
-------------------------

All logs and command receipts occur over two flits:

Flit 0: {zero-padding, TLAST, TDEST, TID, L/C, dbg_guv_address}
	-> If L/C is 0, it means this is a log. If it is 1, it is a command receipt

Flit 1, if L/C is 0: TDATA and TKEEP of the logged flit

Flit 1, if L/C is 1: {zero_padding, dout_not_rdy_cnt, inj_failed, dut_reset, inj_TVALID, |drop_cnt, |log_cnt, keep_dropping, keep_logging, keep_pausing}

NOTE: dout_not_rdy_cnt is a saturating counter which counts how many cycles
since out_TVALID was last ready when the latch command was received.
